import csv
import random

# Configurare luna si zi
luni_permise = ['01', '02', '03', '05', '07']
zile_permise = ['01', '10', '15', '20', '28']

# Generare CNP
def calculeaza_cifra_control(cnp_partial):
    coef = "279146358279"
    total = sum(int(a) * int(b) for a, b in zip(cnp_partial, coef))
    rest = total % 11
    return '1' if rest == 10 else str(rest)

def genereaza_cnp():
    s = str(random.choice([1, 2, 5, 6]))
    aa = str(random.randint(0, 99)).zfill(2)
    ll = random.choice(luni_permise)
    zz = random.choice(zile_permise)
    judet = str(random.randint(1, 52)).zfill(2)
    nnn = str(random.randint(1, 999)).zfill(3)
    cnp_partial = s + aa + ll + zz + judet + nnn
    cifra_control = calculeaza_cifra_control(cnp_partial)
    return cnp_partial + cifra_control

# Clasa Hash Table
class CustomHashTable:
    def __init__(self, size=100003):
        self.size = size
        self.table = [[] for _ in range(self.size)]

    def custom_hash_function(self, cnp):
        hash_value = 0
        prime = 31
        for char in cnp:
            hash_value = (hash_value * prime + ord(char)) % self.size
        return hash_value

    def insert(self, cnp, nume):
        index = self.custom_hash_function(cnp)
        if not any(entry[0] == cnp for entry in self.table[index]):
            self.table[index].append((cnp, nume))
            print(f" Inserat: {cnp} ({nume}) la index {index}")

    def contains(self, cnp):
        index = self.custom_hash_function(cnp)
        bucket = self.table[index]
        iterations = 0
        for stored_cnp, nume in bucket:
            iterations += 1
            if stored_cnp == cnp:
                return True, iterations, nume
        return False, iterations, None

# Incarcare & Testare
def incarca_si_insereaza_cnp(uri, hash_table):
    with open(uri, mode='r', newline='') as file:
        reader = csv.reader(file)
        next(reader)
        for row in reader:
            cnp, nume = row
            hash_table.insert(cnp, nume)

def testeaza_cautare(hash_table, cnp_list):
    sample_cnp = random.sample(cnp_list, 1000)
    total_iterations = 0
    print("\n Începerea testului de căutare pentru 1.000 CNP-uri...\n")
    for cnp in sample_cnp:
        _, iterations, _ = hash_table.contains(cnp)
        total_iterations += iterations
    avg_iterations = total_iterations / 1000
    print(f"\n Test finalizat. Număr total de iterații: {total_iterations}")
    print(f" Număr mediu de iterații per căutare: {avg_iterations:.2f}")

def interfata_cautare(hash_table):
    while True:
        cnp = input(" Introduceți CNP-ul pentru căutare (sau 'exit' pentru a ieși): ").strip()
        if cnp.lower() == "exit":
            break
        found, iterations, nume = hash_table.contains(cnp)
        if found:
            print(f" CNP {cnp} aparține lui {nume}. Găsit după {iterations} iterații.")
        else:
            print(f" CNP {cnp} NU a fost găsit. Iterații: {iterations}")

# Generare & Salvare
prenume = ['Andrei', 'Maria', 'Ion', 'Elena', 'Vasile']
nume_familie = ['Popescu', 'Ionescu', 'Georgescu', 'Stan', 'Dumitrescu']
cnp_date = []

for _ in range(1000000):
    cnp = genereaza_cnp()
    nume_complet = f"{random.choice(prenume)} {random.choice(nume_familie)}"
    print(f"{cnp} - {nume_complet}")  # Afișează fiecare CNP și nume
    cnp_date.append((cnp, nume_complet))

with open("cnp_date.csv", mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['CNP', 'Nume complet'])
    writer.writerows(cnp_date)

# Inserare & Testare
hash_table = CustomHashTable()
incarca_si_insereaza_cnp("cnp_date.csv", hash_table)
testeaza_cautare(hash_table, [cnp for cnp, _ in cnp_date])
interfata_cautare(hash_table)

