# Funcția pentru calculul restului cu programare dinamică
def calculeaza_restul(platit, pret_produs, bancnote, stoc_bancnote):
    rest = platit - pret_produs
    # Creăm un tabel pentru programarea dinamică
    dp = [float('inf')] * (rest + 1)
    dp[0] = 0  # 0 rest se face cu 0 bancnote

    # Variabilele pentru urmărirea bancnotelor utilizate
    folosite = [-1] * (rest + 1)

    for valoare, stoc in bancnote:
        for i in range(rest, valoare - 1, -1):
            for k in range(1, stoc + 1):
                if i - k * valoare >= 0 and dp[i - k * valoare] != float('inf'):
                    if dp[i] > dp[i - k * valoare] + k:
                        dp[i] = dp[i - k * valoare] + k
                        folosite[i] = (i - k * valoare, valoare, k)

    if dp[rest] == float('inf'):
        return None, None  # Nu se poate da restul

    # Urmărim bancnotele utilizate pentru a construi soluția
    solutie = []
    while rest > 0:
        idx, valoare, cantitate = folosite[rest]
        solutie.append((valoare, cantitate))
        rest = idx

    return dp[platit - pret_produs], solutie


# Actualizarea stocului de bancnote
def actualizeaza_stocul(stoc_bancnote, solutie):
    for valoare, cantitate in solutie:
        for i in range(len(stoc_bancnote)):
            if stoc_bancnote[i]['valoare'] == valoare:
                stoc_bancnote[i]['stoc'] -= cantitate


# Simularea procesului de plată
def simulare():
    # Datele fixate direct în cod
    bancnote = [
        {"valoare": 50, "stoc": 20},
        {"valoare": 20, "stoc": 30},
        {"valoare": 10, "stoc": 40},
        {"valoare": 5, "stoc": 50},
        {"valoare": 1, "stoc": 100}
    ]

    produse = [
        {"nume": "Lapte", "pret": 7},
        {"nume": "Paine", "pret": 3},
        {"nume": "Ciocolata", "pret": 5},
        {"nume": "Apa", "pret": 2},
        {"nume": "Cafea", "pret": 9}
    ]

    for produs in produse:
        pret_produs = produs['pret']
        suma_platita = pret_produs + 20  # Alegem o sumă platită mai mare cu maxim 20

        print(f"Produsul cumpărat: {produs['nume']}")
        print(f"Prețul: {pret_produs}")
        print(f"Suma plătită: {suma_platita}")

        restul = suma_platita - pret_produs

        # Calculăm restul folosind programare dinamică
        minim_bancnote, solutie = calculeaza_restul(suma_platita, pret_produs,
                                                    [(b['valoare'], b['stoc']) for b in bancnote], bancnote)

        if minim_bancnote is None:
            print("Nu se poate da restul cu bancnotele disponibile!")
            break  # Oprirea simulării când nu se mai poate da restul
        else:
            print(f"Restul oferit: {restul} (și cu următoarele bancnote):")
            for valoare, cantitate in solutie:
                print(f"Bancnote de {valoare} lei, {cantitate} bucăți")

            # Actualizăm stocul de bancnote
            actualizeaza_stocul(bancnote, solutie)
            print("Stocul de bancnote a fost actualizat.\n")


# Apelăm funcția de simulare
simulare()

